Список вопросов к видео https://t.me/c/1937296927/765/29780 (АЛГОРИТМ ПРИНЯТИЯ И ОТДАЧИ ДОМАШКИ):
    
(По желанию )В ответе подробно всё опишите и обязательно нужно указывать тайм код из видео где я это сказал, по желанию, дополнительно прикладываем скриншот из видео.
Если вы знаете ответы на вопросы из Вашего опыта, то таймкоды из видео не надо указывать и т.д.

1) Как понять, что домашка пришла?
    0:11
    В чате HomeWork приходит сообщение @username прими пул

2) Как принять домашку?
    0:18
    Заходим в "кошечку" -> нажимаем Fetch origin -> в History выбираем коммит с homework (другие коммиты тоже желательно глянуть, вдруг что интересное) -> нажимаем "Open in Visual Studio Code"/"Cursor"
3) Зачем нужна кнопка history и какие функции появляются при нажатии правой кнопки мыши на коммит?
    В History отображается история коммитов текущей ветки
    При нажатии ПКМ появляется выпадающее меню:
    - группа редактирования истории коммитов
      - Amend commit
      - Reset to commit 
      - Checkout commit
      - Recorder commit
      - Revert changes in commit
    - группа работы с веткой
      - Create branch from commit
      - Create Tag...
      - Cherry-pick commit...
    - группа вспомогательных функций
      - Copy SHA
      - Copy Tag
      - View on GitHub

3.1) Где брать ссылку на коммит? куда её отправлять? 
    GitHub Desktop: History -> правой кнопкой мыши на интересующий коммит -> View in GitHub. Ссылка на коммит находится в адресной строке открывшейся в браузере страницы

4) Что такое файл лога? 
    1:36
    log.ipynb
    Файл, который студент заполняет после каждого урока. В нём мы по датам тезисно описываем пройденный/изученный материал

4.1) Когда нужно его пушить?
    Когда ячейка с описанием материала закончена и сделан коммит с соответствующим описанием

5) Что такое интерпретатор? 
    3:18
    Интерпретатор - программа, которая читает и запускает наш код.
    По сути, это программа, которая написана на другом ЯП и скомпилирована в исполняемый файл, который построчно исполняет написанный программистом код

6) Где можно выбрать интерпретатор?
    3:28
    Справа вверху в .ipynb-ноутбуке нажимаем "Select Kernel", выбираем из доступных интерпретаторов.

7) Что такое модуль?
    9:45
    Модуль - это обычный файл .py или .ipynb

8) Как создать и отправить коммит?
    3:40
    - Заходим в "кошку" -> выбираем файлы, которые нужно поместить в коммит -> в поля слева внизу вписываем название (Summary (required)) и описание (Description) коммита -> жмём кнопку "Commit to <username>" -> нажимаем кнопку "Push origin"
    - Можно сделать через VSCode: переходим во вкладку с веточками "Source Control" -> выбираем нужные файлы для коммита -> пишем название -> через два переноса строки пишем описание -> в выпадающем меню кнпоки "Commit" нажимаем кнопку "Commit & Sync" 

9) Как посмотреть что коммит точно отправлен и находится в github?
    4:12
    В "кошке" заходим во вкладку History и видим свежий. Для проверки нажимаем на него ПКМ, выбираем "View on GitHub" (нас перебрасывает в браузер на страницу коммита). 

10) Какая команда показывает что код не прошёл проверки на ошибки? 
    6:40
    pre-commit run --all-files

10.1) Напишите список линтеров которые используются для проверки кода и дайте их краткую характеристику.
    1. jupytext: 
        - конвертирует между форматами .ipynb и .py
        - обеспечивает совместимость jupyter notebooks с системами контроля версий
        - поддерживает синхронизацию между notebook и текстовым файлом
    2. docformatter:
        - форматирует docstrings согласно PEP 257
    3. black:
        - автоматический форматтер кода
        - обеспечивает единый стиль форматирования
    4. pyupgrade
        - обновляет синтаксис языка
    5. isort
        - сортирует импорты в алфавитном порядке и разделяет их по типу
    6. blacken-docs
        - форматирует файлы документации: Markdown, reStructuredText и LaTex файлы
    7. codespell
        - проверяет орфографию текста
    8. flake8
        - проверяет на соответствие стандарту PEP8
        - находит синтаксические ошибки
        - включает в себя несколько проверок:
            - pyflakes (находит логические ошибки)
            - pycodestyle (проверяет стиль кода)
            - mccabe (проверяет сложность кода)
    9. mypy
        - проверяет соответствие типов переменных в коде (например, не пытаемся ли мы сложить строку с числом)
    10. pylint
        - ищет ошибки, плохой стиль и потенциальные проблемы
        - предлагает рефакторинг кода
    11. pydocstyle
        - проверяет соответствие стандартам PEP 257
        - проверяет наличие и формат docstrings
        - подсказывает, если документация оформлена неправильно

11) Как узнать какой именно линтер не прошёл проверку?
    5:35
    При создании коммита в "кошечке", если есть некорректный (и настроен cicd), появляется окошечко с отчётом, где код не прошёл проверку на ошибки.
    Слева указывается имя секции (название линтера), справа статус проверки (Passed или Failed). Под заваленными проверками указывается подробная информация о сущности ошибки и её местоположение
    Аналогичный отчёт можно получить при проверке кода утилитой pre-commit

12) Линтер Pylint видит markdown?
    7:57
    Pylint не видит markdown

13) Номер ячейки в терминале и номер ячейки в vs code может отличаться? в каком случае?
    8:11
    Да, если в ноутбуке будут ячейки формата markdown (линтер их не учитывает, а vscode - учитывает)

14) Где посмотреть номер ячейки в vscode?
    7:31
    Номер активной ячейки и суммарное количество ячеек в ноутбуке в VSCode можно посмотреть в правом нижнем углу

15) В каком формате ipynb отправляется в гитхаб? причём здесь JSON?
    3:47
    "Кошка" отображает всё в формате JSON, так как .ipynb отображается в формате JSON (но это не важно)

16) Где посмотреть в какой ячейке ошибка?
    6:03
    В отчёте линтера. Под сообщением, что проверка Failed будет подробное описание ошибки и её местоположение

17) Как запустить терминал?
    Ctrl+`
    6:31
    Вверху VSCode есть строка меню. Выбираем: Terminal -> New Terminal

18) Что такое линтер?
    6:54
    Линтер - программа, которая проверяет код на корректность

19) В какой сайт нужно вставлять код ошибки если ошибка связана с pylint?
    9:00
    https://pylint.readthedocs.io/en/stable/

20) Секция pydocstyle в большинстве случае автоматический закрывается после исправления ошибок в каком линтере?
    11:14
    Секция pydocstyle автоматически закрывается, когда мы закрыли ошибки по pylint

21) Что такое описание модуля? Оно должно отражать информацию о том что находится в модуле?
    10:23
    Описание модуля - то, какая информация содержится в модуле.
    Текстовая строка, расположенная в самом начале файла и заключённая в тройные кавычки

21) С какой  git команды начинается утро программиста?
    Предполагаю, что git pull, чтобы подкачать локальную репу изменениями, внесёнными контрибьютерами в удалённую репу

22) После внесения изменений в файлах, кнопка open in vs code пропадает в кошке, как по другому открыть vs code из кошки?
    15:22
    В "кошечке" справа вверху нажимаем ПКМ на "Current repository" -> нажимаем "Open in Visual studio Code"

23) Что такое stash?  
    16:38
    Сохранение локальных изменений в буфер обмена, например, для принятия изменений из интернета.
    Операция stash берёт изменённое состояние вашего рабочего каталога, то есть изменённые отслеживаемые файлы и проиндексированные изменения, и сохраняет их в хранилище незавершённых изменений, которые вы можете в любое время применить обратно.
    Стэш это буфер куда мы временно прячем файлы, чтобы принять pull

23.1) Как сохранить стэш?
    git команда(подсказка: https://t.me/c/1937296927/3602/19531): 
    git stash save "NAME_STASH"
        В книге по гиту (https://git-scm.com/book/ru/v2/%D0%98%D0%BD%D1%81%D1%82%D1%80%D1%83%D0%BC%D0%B5%D0%BD%D1%82%D1%8B-Git-%D0%9F%D1%80%D0%B8%D0%BF%D1%80%D1%8F%D1%82%D1%8B%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5-%D0%B8-%D0%BE%D1%87%D0%B8%D1%81%D1%82%D0%BA%D0%B0) есть такие строки:
        В конце октября 2017 года в списке рассылки Git проходило обширное обсуждение, по итогам которого команда git stash save признана устаревшей в пользу существующей альтернативы git stash push.

    Кнопка в vs code:
        Вкладка с веточками Source control -> три точки справа вверху -> Stash -> Stash (include Untracked)

23.2) Как восстановить стэш(подсказка: https://t.me/c/1937296927/3602/25747)?:
      17:07
      В "кошечке" зайти в Stashed Changes (слева внизу) -> нажимаем Restore

      git команда(подсказка: https://t.me/c/1937296927/3602/19531)?:
      git stash apply "NUMBER_STASH"

23.3) Различие между стэшем и коммитом.
    Стэш сохраняет изменения в локальное хранилище, а коммит хранится в основном хранилище репозитория и отображается в истории репозитория
  Когда лучше сохранить изменения в стэше, а когда коммитить.
    В стэш сохраняем, когда делаем pull из интернета, если могут быть конфликты с удалённом репозиторием (локально изменённые файлы были изменены кем-то ещё и залиты в удалённый репозиторий)
    Коммитим, когда считаем, что изменения в рамках задачи завершены и нет конфликтов с удалённым репозиторием (проверяем это через fetch)

23.4) Как просмотреть список сохраненных стэшей?
  git команда (подсказка: https://t.me/c/1937296927/3602/19531):
    git stash list

23.5) Как удалить стэш?  
  Команды для удаления отдельных стэшей или всех сразу.
  git команда (подсказка: https://t.me/c/1937296927/3602/19531):
    git stash drop - для отдельного стеша
    git stash clear - для всего хранилища стешей

23.6) Практические примеры использования стэша.  
  Краткие сценарии, где стэш помогает.
    - Переключаемся на другую ветку проекта. Чтобы не потерять изменения в текущей, сохраняем все незатреканные измнения в стэш
    - Необходимо подгрузить удалённый репозиторий в локальный через pull для просмотра свежих изменений. Если есть конфликт, который пока не хотим решать, отправляем все изменения в стеш, пулим и читаем свежий код

24) Где посмотреть что есть конфликт в файлах? 
    16:20
    При fetch origin -> pull origin в "кошечке" появляется уведомление о конфликтах

24.1) Когда он появляется?
    15:47
    Когда несколько участников проекта работают в одном файле.

25) Как решить конфликт в файлах?
    17:18
    После восстановления файлов из стеша в "кошечке" на файлах с конфликтом появляется восклицательный знак. Открываем конфликтующие файлы в VSCode и устраняем конфликт, выбирая изменения, которые нужно оставить

26) Напишите правильное утверждение
-Зелёное то что пришло с гитхаба и синее локальные изменения или синее то что пришло с гитхаба и зелёное это локальные изменения
    Зелёное - то, что пришло с гитхаба, а синее - локальные изменения

27) Если мы работаем в одном файле, можно ли принять pull после того как вы спрячете в стэш свои изменения?
    Да

27.1) Что может произойти когда stash восстановите после принятия pull?
    Может появиться конфликт слияния, который нужно устранить, выбирая изменения, которые следует оставить в проекте

28) Сколько способов решения конфликтов было показано в видео? Напишите ЧИСЛО и укажите их способы.
    17:45
    3 способа решения конфликтов:
    - Accept Current Changes - оставляем то, что пришло из интернета, и удаляем то, что сделали в локальном репозитории (рекомендуется)
    - Accept Incoming Changes - оставляем то, что сделали в локальном репозитории, и удаляем то, что пришло из интернета (в особых случаях)
    - Accept Both Changes - оставляем оба изменения

29) Что делает кнопка complete merge?
    Завершает слияние веток после устранения конфликтов

30) В какой чат нужно писать если остались вопросы?
    19:38
    HELP ME

31) Что такое FORK? Зачем его делают? 
    20:26
    Процедура копирования чужого репозитория, найденного на просторах гитхаба, и сохранение его в своём профиле в качестве личного репозитория
    21:23
    Например, мы хотим помочь другому проекту

32) Как скачать форкнутый репозиторий на локальный компьютер?
    20:50
    Заходим в "кошечку" и клонируем форкнутый репозиторий: Current Repository -> Add -> Clone Repository и выбираем из списка форкнутый репозиторий -> Clone

33) С какой вероятностью ваши ошибки были уже решены? и кто их решил?
    13:55
    С вероятностью 90% ошибки уже были решены в чате HELP ME преподавателем или другими студентами

34) Как создать файл в vs code?
    1:17
    Во вкладке Eplorer с двумя листочками нажимаем на листочек в с плюсом -> пишем название файла

35) Файл лога нужно заполнять в конце каждого урока?
    1:36
    Да, файл лога нужно заполнять в конце каждого урока
==================

Дополнительные вопросы:
1)Какая команда конвертирует файл в py из ipynb? 
подсказка https://t.me/c/1937296927/1/26527
    jupyter nbconvert --to python <YourNotebook>.ipynb
    В результате выполнения этой команды будет сгенерирован файл <YourNotebook>.py, содержащий исполняемый код из ноутбука.

2) Что такое пакетный менеджер? Вы пользуетесь пакетным менеджером conda или pip? Какой лучше использовать для дата сайнс?
    Пакетный менеджер - программа, с помощью которой можно осуществлять установку, обновление, удаление и управление пакетами и библиотеками, что обеспечивает удобство и эффективность в разработке.
    Для работы с обычными пакетами пользуюсь pip.

    [Разница между pip и conda](https://sky.pro/media/raznicza-mezhdu-pip-i-conda/)
    Различия между pip и conda:
    - Управление зависимостями: conda управляет зависимостями в более широком смысле. Он может устанавливать бинарные пакеты, которые могут быть не связаны с Python. Например, вы можете использовать conda для установки пакетов C или C++. Pip же устанавливает только Python пакеты.
    - Управление окружениями: conda позволяет легко создавать и управлять изолированными окружениями, что полезно для изолирования проектов и управления версиями пакетов. Pip не предоставляет таких возможностей напрямую, хотя вы можете использовать его совместно с виртуальными окружениями Python.
    - Бинарные пакеты: conda устанавливает бинарные пакеты, что может быть проще и быстрее, чем компиляция исходного кода, как это делает pip.
    - Платформа: pip — это стандартный менеджер пакетов Python и может быть использован в любом месте, где установлен Python. Conda, с другой стороны, является частью дистрибутива Anaconda и, хотя он может быть установлен без полного дистрибутива Anaconda, он обычно используется вместе с ним.

3) Почему расширение py лучше чем ipynb?
    [.ipynb против .py](https://enosjeba.medium.com/ipynb-vs-py-9d17fbce6669)
    Зависит от того. Чего мы пытаемся достичь. Python — интерпретируемый язык, и он делает возможными быстрые ответы. Файлы .ipynb используют эти преимущества наилучшим образом. Однако мы видим, что .py также эффективны в использовании. Его способность запускать весь код одновременно также приносит нам некоторую пользу. Что предлагают оба метода.
    .py
        - Коды в файле .py выполняются за один запуск.
        - Файлы .py легко переносить на несколько платформ.
        Полезно для случая:
        -Создать процесс на основе сценария и запускать его, когда захотите.
        - Выполнять процесс, в котором каждый шаг понятен и известен.
        - Для сборки модулей
    .ipynb
        - Ячейки с кодом можно выполнять по одной.
        - Для запуска потребуется поддержка плагина Jupyter.
        Полезно для случая:
        - Чтобы построить экспериментальное решение
        - Подход, при котором вы не уверены в результате и хотите изменять или обновлять параметры на каждом этапе.
        - Экспериментальная работа

4) Что такое pep8?
подсказка:https://peps.python.org/pep-0008/
    Стандарт стиля разработанного кода на python. Носит рекомендательный характер

4.1) линтеры проверяют на соблюдение pep8?
    Да, например, flake8

4.2) Какая нотация используется для создания переменных?
ответ на 85-95 страницы https://t.me/c/1937296927/1/16676
    стр. 87
    Имена функций, методов и переменных записывают в нижнем змеином регистре.

4.3) Может ли переменная состоять из одной буквы например андерскор  "_" ?
    Интерпретатор Python не запрещает использовать односимвольную переменную "_". Например, код:
        _ = 11
        print(_)
    не вызовет ошибки, и в терминал распечатается значение переменной "_"
    Однако, такие односимвольные переменные рекомендуется использовать только в локальных участках кода, чтобы не снижать читаемость общего кода приложения, например так:
        for _ in range(11):
            print("hello, ai")
    В этом цикле инкремент назван "_". За пределами цикла инкремент мы не используем

4.4) Зачем и где мы используем андерскор _
    - Имена функций, методов и переменных записывают в нижнем змеином регистре. Snake case подразумевает использование андерскора
    - Приватные и защищённые атрибуты класса

4.5) По PEP8 допустима переменная в одну букву?
ответ на 85-95 страницы https://t.me/c/1937296927/1/16676
    - Поскольку код чаще читается, чем пишется, то короткие имена переменных допустимы в отдельных случаях. Например, имя i часто используется с переменными циклов for, перебирающих диапазоны чисел или индексов списка, а j и k (следующие за i в алфавитном порядке) используются с вложенными циклами.
    Общепринятые переменные, типа x, y, z - геометрические координаты
